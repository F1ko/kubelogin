// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/int128/kubelogin/pkg/adaptors (interfaces: Kubeconfig)

// Package mock_adaptors is a generated GoMock package.
package mock_adaptors

import (
	gomock "github.com/golang/mock/gomock"
	kubeconfig "github.com/int128/kubelogin/pkg/models/kubeconfig"
	reflect "reflect"
)

// MockKubeconfig is a mock of Kubeconfig interface
type MockKubeconfig struct {
	ctrl     *gomock.Controller
	recorder *MockKubeconfigMockRecorder
}

// MockKubeconfigMockRecorder is the mock recorder for MockKubeconfig
type MockKubeconfigMockRecorder struct {
	mock *MockKubeconfig
}

// NewMockKubeconfig creates a new mock instance
func NewMockKubeconfig(ctrl *gomock.Controller) *MockKubeconfig {
	mock := &MockKubeconfig{ctrl: ctrl}
	mock.recorder = &MockKubeconfigMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockKubeconfig) EXPECT() *MockKubeconfigMockRecorder {
	return m.recorder
}

// GetCurrentAuthProvider mocks base method
func (m *MockKubeconfig) GetCurrentAuthProvider(arg0 string, arg1 kubeconfig.ContextName, arg2 kubeconfig.UserName) (*kubeconfig.AuthProvider, error) {
	ret := m.ctrl.Call(m, "GetCurrentAuthProvider", arg0, arg1, arg2)
	ret0, _ := ret[0].(*kubeconfig.AuthProvider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentAuthProvider indicates an expected call of GetCurrentAuthProvider
func (mr *MockKubeconfigMockRecorder) GetCurrentAuthProvider(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentAuthProvider", reflect.TypeOf((*MockKubeconfig)(nil).GetCurrentAuthProvider), arg0, arg1, arg2)
}

// UpdateAuthProvider mocks base method
func (m *MockKubeconfig) UpdateAuthProvider(arg0 *kubeconfig.AuthProvider) error {
	ret := m.ctrl.Call(m, "UpdateAuthProvider", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAuthProvider indicates an expected call of UpdateAuthProvider
func (mr *MockKubeconfigMockRecorder) UpdateAuthProvider(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAuthProvider", reflect.TypeOf((*MockKubeconfig)(nil).UpdateAuthProvider), arg0)
}
